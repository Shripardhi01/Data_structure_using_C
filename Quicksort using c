#include <stdio.h>
#define SIZE 6	/*array size*/


void partitionArray(int *a, int beg, int end, int *pivotLoc);
void quickSort(int *a, int beg, int end);

int main(){
	int a[SIZE] = {5,2,6,1,3,4};
	int i;
  quickSort(a, 0, SIZE-1);	
	//printing sorted element of array
	for(i = 0; i < SIZE; i++){
		printf("%d\t", a[i]);
	}
	return 0;
}

void quickSort(int *a, int beg, int end){
	int pivotLoc;
	if(beg < end){
		partitionArray(a, beg, end, &pivotLoc);	//this will find the pivot location and partition the array
		quickSort(a, beg, pivotLoc - 1);	//quick sort the left sub array
		quickSort(a, pivotLoc + 1, end);	//quick sort the right sub array
	}
}

void partitionArray(int *a, int beg, int end, int *pivotLoc){
	int left = beg;		//left array
	int right = end;	//right array
	*pivotLoc = left;	//pivot
	int tmp;

	while(1){

		//pivot pointing at left
		while(a[*pivotLoc] <= a[right] && *pivotLoc != right){
			right--;	
		}

		if(*pivotLoc == right){	//both left and right pointing at same element of the array
			break;
		}else if(a[*pivotLoc] > a[right]){
			//pivot element greater than right element. swap pivot and right element.
			tmp = a[right];
			a[right] = a[*pivotLoc];
			a[*pivotLoc] = tmp;
			*pivotLoc = right;	//pivot is now pointing to right
		}

		while(a[*pivotLoc] >= a[left] && *pivotLoc != left){	
			left++;	
		}

		if(*pivotLoc == left){	
			break;
		}else if(a[*pivotLoc] < a[left]){
			tmp = a[left];
			a[left] = a[*pivotLoc];
			a[*pivotLoc] = tmp;
			*pivotLoc = left;
		}
	}
}
